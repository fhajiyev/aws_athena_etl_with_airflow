---
pipeline_key: bs_g_stream_point
pipeline_type: athena_process
pipeline_dag_configs:
  start_date: 2020-07-21 11:00:00
  schedule_interval: "0 * * * *"

upstream_dependencies:
  - dag_id: athena_catalog_bs_l_point
    timedelta_hours: 0

downstream_dependencies:
  - dag_id: athena_deduplicate_bs_g_point
    task_id: generate_uuid

sensor_soft_fail: false

athena:
  workgroup: buzzscreen
  process_query: |
    CREATE TABLE IF NOT EXISTS {database}.{temp_table}
    WITH (
          format = 'PARQUET',
          parquet_compression = 'SNAPPY',
          external_location = 's3://{output_bucket}/{output_prefix}'
    ) AS (
        SELECT
            eventname                                       AS event_name,
            FROM_UNIXTIME(approximatecreationdatetime)      AS event_created_at,
            CAST(newimage.did.n AS BIGINT)                  AS device_id,
            CAST(newimage.v.n AS BIGINT)                    AS version,
            CAST(newimage.ui.n AS BIGINT)                   AS unit_id,
            CAST(newimage.udt.s AS VARCHAR)                 AS unit_device_token,
            CAST(newimage.r.bool AS BOOLEAN)                AS requested,
            CAST(newimage.pt.s AS VARCHAR)                  AS point_type,
            CAST(newimage.ti.s AS VARCHAR)                  AS title,
            CAST(newimage.st.s AS VARCHAR)                  AS sub_type,
            COALESCE(TRY_CAST(newimage.rk.s AS INTEGER), 1) AS campaign_id, -- arcade reward의 경우 refer_key가 "<transaction_id>-<level>" 포맷이므로 강제로 1로 설정
            CAST(newimage.am.n AS INTEGER)                  AS amount,
            CAST(newimage.br.n AS INTEGER)                  AS base_reward,
            CAST(newimage.ds.n AS INTEGER)                  AS deposit_sum,
            FROM_UNIXTIME(CAST(newimage.ca.n AS BIGINT))    AS created_at,
            CAST(newimage.sc.n AS INTEGER)                  AS scatter,
            FROM_UNIXTIME(CAST(newimage.slot.n AS BIGINT))  AS slot,
            FROM_UNIXTIME(CAST(newimage.ua.n AS BIGINT))    AS updated_at
        FROM
            {{{{ var.value.get('server_env', 'prod') }}}}_buzzscreen.l_point
        WHERE
            partition_timestamp >= TIMESTAMP'{start_time}' AND
            partition_timestamp < TIMESTAMP'{end_time}'
    );
  output_bucket: "{{ var.value.get('server_env', 'prod') }}-buzzvil-data-lake"
  output_prefix: buzzscreen/gold/stream_point/year={year}/month={month}/day={day}/hour={hour}
  file_key: bs_g_stream_point
  file_extension: parquet

  database: "{{ var.value.get('server_env', 'prod') }}_buzzscreen"
  table: g_stream_point
  location: "s3://{{ var.value.get('server_env', 'prod') }}-buzzvil-data-lake/buzzscreen/gold/stream_point"
  partition:
    name: partition_timestamp
    value: "{{ execution_date.strftime('%Y-%m-%d %H:00:00') }}"
    location: "s3://{{{{ var.value.get('server_env', 'prod') }}}}-buzzvil-data-lake/buzzscreen/gold/stream_point/year={year}/month={month}/day={day}/hour={hour}"
  create_table_syntax: |
    CREATE EXTERNAL TABLE IF NOT EXISTS {database}.{table}(
        event_name          VARCHAR(64),
        event_created_at    TIMESTAMP,
        device_id           BIGINT,
        version             BIGINT,
        unit_id             BIGINT,
        unit_device_token   VARCHAR(512),
        requested           BOOLEAN,
        point_type          VARCHAR(64),
        title               VARCHAR(1024),
        sub_type            VARCHAR(16),
        campaign_id         BIGINT,
        amount              BIGINT,
        base_reward         BIGINT,
        deposit_sum         BIGINT,
        created_at          TIMESTAMP,
        scatter             INTEGER,
        slot                TIMESTAMP,
        updated_at          TIMESTAMP
    )
    PARTITIONED BY (partition_timestamp timestamp)
    STORED AS PARQUET
    LOCATION '{location}'
    tblproperties("parquet.compress"="SNAPPY");
