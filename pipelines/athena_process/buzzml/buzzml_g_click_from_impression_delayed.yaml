---
pipeline_key: buzzml_g_click_from_impression_delayed
pipeline_type: athena_process
pipeline_dag_configs:
  start_date: 2020-10-29 00:00:00
  schedule_interval: "@hourly"

alerts:
  slack:
    - trigger: failure
      args:
        channel: data-emergency-oracle
    - trigger: sla_miss
      args:
        channel: data-emergency-oracle
    - trigger: retry
      args:
        channel: data-warning

upstream_dependencies:
  - dag_id: athena_catalog_ba_l_lineitem
    timedelta_hours: 0
  - dag_id: athena_catalog_ba_l_impression
    timedelta_hours: 0
  - dag_id: redshift_s3_sync_ba_l_product
    timedelta_hours: 0
  - dag_id: athena_catalog_ba_l_click
    timedelta_hours: 0

sensor_soft_fail: false

athena:
  workgroup: oracle
  process_query: |
    CREATE TABLE IF NOT EXISTS {database}.{temp_table}
    WITH (
          format = 'PARQUET',
          parquet_compression = 'SNAPPY',
          external_location = 's3://{output_bucket}/{output_prefix}'
    ) AS (
      SELECT
        CAST(viewer_id AS VARCHAR(64)) AS viewer_id,
        CAST(allocation_id AS VARCHAR(64)) AS allocation_id,
        CAST(lineitem_id AS BIGINT) AS lineitem_id,
        CAST(unit_id AS BIGINT) AS unit_id,
        CAST(product_id AS BIGINT) AS product_id,
        CAST(product_feed_id AS BIGINT) AS product_feed_id,
        CAST(user_action AS VARCHAR(32)) AS user_action,
        CAST(is_occurred AS BOOLEAN) AS is_occurred,
        CAST(CASE
            WHEN action_point > 0 THEN revenue_type
            WHEN landing_point > 0 THEN 'click' ELSE 'none'
        END AS VARCHAR(64)) AS reward_condition,
        CAST(occurred_at AS VARCHAR(64)) AS occurred_at
      FROM
      (
          with click as (
              SELECT
                ARBITRARY(viewer_id) AS viewer_id,
                allocation_id,
                lineitem_id,
                ARBITRARY(unit_id) AS unit_id,
                CAST(ARBITRARY(product_id) AS BIGINT) AS product_id,
                MAX(time) AS time,
                1 AS is_click
                FROM
                    prod_buzzad.l_click
                WHERE
                    partition_timestamp    >= TIMESTAMP'{start_time}' - INTERVAL '1' HOUR
                    AND partition_timestamp < TIMESTAMP'{end_time}'
                GROUP BY
                    allocation_id, lineitem_id
          ), impression as (
              SELECT
                    ARBITRARY(viewer_id) AS viewer_id,
                    allocation_id,
                    lineitem_id,
                    ARBITRARY(unit_id) AS unit_id,
                    CAST(ARBITRARY(product_id) AS BIGINT) AS product_id,
                    MAX(time) AS time,
                    0 AS is_click
                FROM
                    prod_buzzad.l_impression
                WHERE
                    partition_timestamp    >= TIMESTAMP'{start_time}' - INTERVAL '1' HOUR
                    AND partition_timestamp < TIMESTAMP'{end_time}' - INTERVAL '1' HOUR
                    AND time >= TIMESTAMP'{start_time}' - INTERVAL '1' HOUR
                    AND time < TIMESTAMP'{end_time}' - INTERVAL '1' HOUR
                GROUP BY
                    allocation_id, lineitem_id
          ), click_not_occurred as (
              SELECT
                impression.viewer_id,
                impression.allocation_id,
                impression.lineitem_id,
                impression.unit_id,
                impression.product_id,
                'click_from_impression' AS user_action,
                FALSE AS is_occurred,
                NULL AS reward_condition,
                impression.time + INTERVAL '1' HOUR AS occurred_at
            FROM
                impression
            LEFT JOIN
                click
                ON impression.allocation_id = click.allocation_id
                AND impression.lineitem_id = click.lineitem_id
            WHERE
                click.viewer_id IS NULL
          ), click_occurred as (
              SELECT
                viewer_id,
                allocation_id,
                lineitem_id,
                unit_id,
                product_id,
                'click_from_impression' AS user_action,
                TRUE AS is_occurred,
                NULL AS reward_condition,
                time as occurred_at
            FROM
                click
            WHERE
                time >= TIMESTAMP'{start_time}'
                AND time < TIMESTAMP '{end_time}'
          ), unioned as (
              select * from click_not_occurred
              union
              select * from click_occurred
          )
          select * from unioned
            LEFT JOIN(
              SELECT
                  id,
                  ARBITRARY(product_feed_id) AS product_feed_id
              FROM
                  prod_buzzad.l_product
              GROUP BY
                  id
              ) AS pp
                ON unioned.product_id = pp.id
            LEFT JOIN(
                SELECT
                    id,
                    landing_point,
                    action_point,
                    revenue_type
                FROM
                    prod_buzzad.l_lineitem
                WHERE
                    partition_timestamp = TIMESTAMP'{start_time}'
            ) AS lineitem
              ON unioned.lineitem_id = lineitem.id
      )
    );

  output_bucket: "{{ var.value.get('server_env', 'prod') }}-buzzvil-data-lake"
  output_prefix: buzzml/gold/click_from_impression_delayed/year={year}/month={month}/day={day}/hour={hour}
  file_key: buzzml_g_click_from_impression_delayed
  file_extension: parquet

  database: "{{ var.value.get('server_env', 'prod') }}_buzzml"
  table: g_click_from_impression_delayed
  location: "s3://{{ var.value.get('server_env', 'prod') }}-buzzvil-data-lake/buzzml/gold/click_from_impression_delayed"

  partition:
    name: partition_timestamp
    value: "{{ (execution_date).strftime('%Y-%m-%d %H:00:00') }}"
    location: "s3://{{{{ var.value.get('server_env', 'prod') }}}}-buzzvil-data-lake/buzzml/gold/click_from_impression_delayed/year={year}/month={month}/day={day}/hour={hour}"
  create_table_syntax: |
    CREATE EXTERNAL TABLE IF NOT EXISTS {database}.{table} (
      viewer_id                VARCHAR(64),
      allocation_id            VARCHAR(64),
      lineitem_id              BIGINT,
      unit_id                  BIGINT,
      product_id               BIGINT,
      product_feed_id          BIGINT,
      user_action              VARCHAR(32),
      is_occurred              BOOLEAN,
      reward_condition         VARCHAR(64),
      occurred_at              VARCHAR(64)
    )
    PARTITIONED BY (partition_timestamp timestamp)
    STORED AS PARQUET
    LOCATION '{location}'
    tblproperties("parquet.compress"="SNAPPY");
