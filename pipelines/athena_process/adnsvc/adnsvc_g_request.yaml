---
pipeline_key: adnsvc_g_request
pipeline_type: athena_process
pipeline_dag_configs:
  start_date: 2020-08-01 00:00:00
  schedule_interval: "0 * * * *"
upstream_dependencies:
  - dag_id: athena_catalog_adnsvc_l_request
    timedelta_hours: 0
athena:
  workgroup: adnsvc
  process_query: |
    CREATE TABLE IF NOT EXISTS {database}.{temp_table}
    WITH (
          format = 'JSON',
          external_location = 's3://{output_bucket}/{output_prefix}'
    ) AS (
        SELECT
          payload['adnetwork_id'] as adnetwork_id,
          payload['body'] as body,
          payload['endpoint'] as endpoint,
          payload['header'] as header,
          payload['lineitem_id'] as lineitem_id,
          payload['method'] as method,
          payload['request_id'] as request_id,
          log_at
        FROM
          {{{{ var.value.get('server_env', 'prod') }}}}_adnsvc.l_request
        WHERE
          partition_timestamp >= TIMESTAMP'{start_time}' AND
          partition_timestamp < TIMESTAMP'{end_time}'
    );
  output_bucket: "{{ var.value.get('server_env', 'prod') }}-buzzvil-data-lake"
  output_prefix: adnsvc/gold/request/year={year}/month={month}/day={day}/hour={hour}
  file_key: adnsvc_gold_request
  file_extension: json.gz

  database: "{{ var.value.get('server_env', 'prod') }}_adnsvc"
  table: g_request
  location: "s3://{{ var.value.get('server_env', 'prod') }}-buzzvil-data-lake/adnsvc/gold/request"
  partition:
    name: partition_timestamp
    value: "{{ execution_date.strftime('%Y-%m-%d %H:00:00') }}"
    location: "s3://{{{{ var.value.get('server_env', 'prod') }}}}-buzzvil-data-lake/adnsvc/gold/request/year={year}/month={month}/day={day}/hour={hour}"
  create_table_syntax: |
    CREATE EXTERNAL TABLE IF NOT EXISTS {database}.{table} (
      adnetwork_id      INT,
      body              STRING,
      endpoint          VARCHAR(1023),
      header            VARCHAR(511),
      lineitem_id       INT,
      method            VARCHAR(8),
      request_id        VARCHAR(40),
      log_at            TIMESTAMP
    )
    PARTITIONED BY (partition_timestamp TIMESTAMP)
    ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
    WITH SERDEPROPERTIES (
      'serialization.format' = '1',
      'ignore.malformed.json'='true'
    )
    LOCATION '{location}';
