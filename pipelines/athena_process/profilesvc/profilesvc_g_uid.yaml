---
pipeline_key: profilesvc_g_uid
pipeline_type: athena_process
pipeline_dag_configs:
  start_date: 2020-07-24 01:00:00
  schedule_interval: "0 * * * *"

alerts:
  slack:
    - trigger: failure
      args:
        channel: dev-emergency-mugshot
    - trigger: sla_miss
      args:
        channel: dev-emergency-mugshot
    - trigger: retry
      args:
        channel: data-warning

upstream_dependencies:
  - dag_id: athena_catalog_profilesvc_l_uid
    timedelta_hours: 0

athena:
  workgroup: profilesvc
  process_query: |
    CREATE TABLE IF NOT EXISTS {database}.{temp_table}
    WITH (
      format = 'PARQUET',
      parquet_compression = 'SNAPPY',
      external_location = 's3://{output_bucket}/{output_prefix}'
    ) AS (
      SELECT
        payload['value'] AS value,
        payload['field'] AS field,
        payload['profile_id'] AS profile_id,
        timestamp AS created_at
      FROM
        {database}.l_uid
      WHERE
        partition_timestamp >= TIMESTAMP'{start_time}' AND
        partition_timestamp < TIMESTAMP'{end_time}'
    );
  output_bucket: "{{ var.value.get('server_env', 'prod') }}-buzzvil-data-lake"
  output_prefix: profilesvc/gold/uid/year={year}/month={month}/day={day}/hour={hour}
  file_key: profilesvc_g_uid
  file_extension: parquet

  create_table_syntax: |
    CREATE EXTERNAL TABLE IF NOT EXISTS {database}.{table} (
      value STRING,
      field STRING,
      profile_id STRING,
      created_at BIGINT
    )
    PARTITIONED BY (partition_timestamp TIMESTAMP)
    STORED AS PARQUET
    LOCATION '{location}'
    tblproperties("parquet.compress"="SNAPPY");

  database: "{{ var.value.get('server_env', 'prod') }}_profilesvc"
  table: g_uid
  location: "s3://{{ var.value.get('server_env', 'prod') }}-buzzvil-data-lake/profilesvc/gold/uid"
  partition:
    name: partition_timestamp
    value: "{{ execution_date.strftime('%Y-%m-%d %H:00:00') }}"
    location: "s3://{{{{ var.value.get('server_env', 'prod') }}}}-buzzvil-data-lake/profilesvc/gold/uid/year={year}/month={month}/day={day}/hour={hour}"
