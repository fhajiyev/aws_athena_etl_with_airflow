# NOTE: 2 hours delayed dag
---
pipeline_key: pointsvc_point
pipeline_type: redshift_query
pipeline_dag_configs:
  start_date: 2020-04-29 04:00:00
  schedule_interval: "0 * * * *"

alerts:
  slack:
    - trigger: failure
      args:
        channel: data-emergency
    - trigger: sla_miss
      args:
        channel: data-emergency
    - trigger: retry
      args:
        channel: data-warning

upstream_dependencies:
  - dag_id: athena_process_pointsvc_g_point_redshift
    timedelta_hours: 0

redshift:
  query: |
    BEGIN;
    CREATE TABLE IF NOT EXISTS pointsvc_point
    (
      resource_id           BIGINT            ENCODE AZ64,
      resource_type         VARCHAR(16)       ENCODE ZSTD,
      event_type            VARCHAR(16)       ENCODE ZSTD,
      redeem_id             VARCHAR(72)       ENCODE ZSTD,
      redeem_type           VARCHAR(16)       ENCODE ZSTD,
      redeem_status         VARCHAR(16)       ENCODE ZSTD,

      amount                BIGINT            ENCODE AZ64,
      deposit_sum           BIGINT            ENCODE AZ64,
      withdraw_sum          BIGINT            ENCODE AZ64,

      account_id            BIGINT            ENCODE AZ64,
      app_id                BIGINT            ENCODE AZ64,
      publisher_user_id     VARCHAR(100)      ENCODE ZSTD,

      reward_transaction_id VARCHAR(72)       ENCODE ZSTD,
      unit_id               BIGINT            ENCODE AZ64,
      extra                 VARCHAR(65535)    ENCODE ZSTD,
      created_at            TIMESTAMP         ENCODE AZ64,
      updated_at            TIMESTAMP         ENCODE AZ64,

      version               BIGINT            ENCODE AZ64,
      scatter               BIGINT            ENCODE AZ64
    )
    DISTKEY (unit_id)
    SORTKEY (created_at)
    ;
    
    DELETE
    FROM
      pointsvc_point
    WHERE
    created_at >= TIMESTAMP'{{ (execution_date - macros.timedelta(hours=2)).strftime('%Y-%m-%d %H:00:00') }}' AND
    created_at < TIMESTAMP'{{ (next_execution_date - macros.timedelta(hours=2)).strftime('%Y-%m-%d %H:00:00') }}'
    ;
    COPY
      pointsvc_point
    FROM
      's3://{{ var.value.get('server_env', 'prod') }}-buzzvil-data-lake/pointsvc/gold/point_redshift/year={{ (execution_date - macros.timedelta(hours=2)).strftime('%Y') }}/month={{ (execution_date - macros.timedelta(hours=2)).strftime('%m') }}/day={{ (execution_date - macros.timedelta(hours=2)).strftime('%d') }}/hour={{ (execution_date - macros.timedelta(hours=2)).strftime('%H') }}/'
    ACCESS_KEY_ID '{{ var.value.get('redshift_access_key') }}'
    SECRET_ACCESS_KEY '{{ var.value.get('redshift_secret_key') }}'
    PARQUET
    STATUPDATE OFF
    COMPUPDATE OFF;
    
    END;
