# The dag validates deduplicated view buzzscreen.g_vw_point for buzzscreen.g_stream_point
# augend: If g_vw_point has vanished records from g_stream_point, augend value has positive integer 
# addend: If g_vw_point has duplicated records per unique keys (device_id, version), addend value has positive integer
# augend + addend must be zero
---
pipeline_key: bs_g_vw_point_deduplicated
pipeline_type: check_data
pipeline_dag_configs:
  start_date: 2020-11-25 00:00:00
  schedule_interval: "0 * * * *"

alerts:
  slack:
    - trigger: failure
      args:
        channel: airflow-check-monitoring
    - trigger: sla_miss
      args:
        channel: airflow-check-monitoring

upstream_dependencies:
  - dag_id: athena_view_bs_g_vw_point
    timedelta_hours: 0

# table has no vanished record
augend:
  data_source:
    type: athena
    database: "{env}_buzzscreen"
    workgroup: buzzscreen
  query: |
    SELECT
      COUNT(*) AS result
    FROM
      {env}_buzzscreen.g_stream_point S
      LEFT OUTER JOIN {env}_buzzscreen.g_vw_point D
          ON S.device_id = D.device_id AND S.version = D.version
    WHERE
      S.partition_timestamp >= TIMESTAMP '{start_time}' - interval '1' hour   -- stream record has late arrival issue
      AND S.partition_timestamp < TIMESTAMP '{end_time}' + interval '1' hour
      AND S.created_at >= TIMESTAMP '{start_time}'
      AND S.created_at < TIMESTAMP '{end_time}'

      AND D.partition_timestamp >= TIMESTAMP '{start_time}'
      AND D.partition_timestamp < TIMESTAMP '{end_time}'
      AND D.created_at >= TIMESTAMP '{start_time}'
      AND D.created_at < TIMESTAMP '{end_time}'

      AND D.device_id is NULL
      AND D.version is NULL

# well deduplicated
addend:
  data_source:
    type: athena
    database: "{env}_buzzscreen"
    workgroup: buzzscreen
  query: |
    SELECT
      SUM(P.cnt) as result  -- sum of duplicated records in dedup table
    FROM (
      SELECT
        device_id,
        version,
        COUNT(*) as cnt
      FROM
        {env}_buzzscreen.g_vw_point
      WHERE
        partition_timestamp >= TIMESTAMP '{start_time}'
        AND partition_timestamp <  TIMESTAMP '{end_time}'
        AND created_at >= TIMESTAMP '{start_time}'
        AND created_at < TIMESTAMP '{end_time}'
      GROUP BY 1, 2
      HAVING COUNT(*) > 1
    ) AS P
  default: 0

comparison:
  operator: eq
  threshold: 0
